jira-vim.txt    For Vim version 8.0     Last Change: 2019 June 19

*jira-vim* *jiravim*

         _____________                     ___    ______            ~
         ______  /__(_)____________ _      __ |  / /__(_)______ ___ ~
         ___ _  /__  /__  ___/  __ `/________ | / /__  /__  __ `__ \~
        / /_/ / _  / _  /   / /_/ /_/_____/_ |/ / _  / _  / / / / / ~
        \____/  /_/  /_/    \__,_/        _____/  /_/  /_/ /_/ /_/  ~

================================================================================
CONTENTS                                                        *jiravim-contents* 

    1. Introduction ........................................... |jiravim-intro|
    2. Installation .................................... |jiravim-installation|
    3. Setup .................................................. |jiravim-setup|
    4. Commands ............................................ |jiravim-commands|
    5. Filetypes .......................................... |jiravim-filetypes|
        a. Keybind Guide ......................... |jiravim-filetypes-keybinds|
    6. License .............................................. |jiravim-license| 
    7. Contact .............................................. |jiravim-contact|

================================================================================
INTRODUCTION                                                       *jiravim-intro* 

Jira-vim is a way to view your JIRA setup without the bloat of the JIRA UI.

Imagine browsing Jira on your computer. All those buttons, animations, and
fancy UI magic that you don't really need are really slowing down your
computer. It's not improving your productivity, on the contrary it makes you
wait and distract yourself while it loads features you'll never need! So I
created this: an attempt at de-bloating Jira by getting rid of the UI and using
the standard Vim environment that we know and love to display data that we
obtain from the API. 

================================================================================
INSTALLATION                                *jiravim-install* *jiravim-installation*

With Pathogen, use: >
    cd ~/.vim/bundle/
    git clone https://github.com/paulkass/jira-vim

With Vim-Plug, use: >
    Plug 'paulkass/jira-vim'

Checks will be performed on startup.

================================================================================
SETUP                                                              *jiravim-setup*

Many of the steps described in this guide aren't necessary for many systems.
This is the full from-scratch installation procedure after plugin installation.
Instead, the plugin will check that all of these items are complete at startup
and let you know if something is missing. It will also refer you to the
appropriate section of this guide for instructions on fixing the particular
issue. 

If this guide doesn't help you with your issue, feel free to contact me at
leonardthesalmon@protonmail.com

--------------------------------------------------------------------------------

Step 0: Make sure that you have python3 installed. This varies system to system,
but the python3 executable is usually in the `python3` command, although it's
also sometimes in the default `python` command. Check with `python --version` or
`python3 --version`

                                                     *jiravim-python3-compile*
Step 1: Make sure you compiled vim with `python3` support. This can be checked with >
    echo has('python3')
If if returns 0, you might have to recompile vim with python3 support. This
stackoverflow post seems like a pretty detailed explanation:
https://stackoverflow.com/questions/30444890/vim-use-python3-interpreter-in-python-mode

                                                         *jiravim-pip-install*
Step 2: Install pip dependencies. Similarly to the situation in Step 0, the pip
binary that install dependencies for python3 can be in either `pip` or `pip3`
executables. Check by running it with the `--version` option to make sure it's
compiled for python3. Then run `pip3 install --user -r requirements.txt` from
the base directory of the project.

If the plugin still doesn't see the python dependencies, you might want to try
the following. Say your command for the pip associated with python3 is `pip3`.
If you run `pip3 show jira`, there will be a field that says >
        Location: <path>
Copy this path, and put the following either in your `.vimrc` or
`plugin/credentials.vim`: >
        python3 import sys
        python3 sys.path.append("<path>")
Do this for any package that the plugin complains about. This is a manual
override that might solve your dependency problems.

                                                         *jiravim-credentials*
Step 3: Obtain your credentials. Let the following variables either in your
`.vimrc` or in the `plugin/credentials.vim` file. For example, the following
configuration   >
    let g:jiraVimDomainName = "https://jira.antarctica.org"
    let g:jiraVimEmail = "joethepenguin@antarctica.org"
    let g:jiraVimToken = "1234567890abc..."
would correspond to a user whose email is "joethepenguin@antarctica.org" and the
website of his jira instance is "https://jira.antarctica.org".  Alternatively,
if you jira instance URL is of the form "<something>.atlassian.net", you can
just put "<something" into the `g:jiraVimDomainName` variable. So for example,
if you jira instance URL is "ocean.atlassian.net", you can put >
     let g:jiraVimDomainName = "ocean" as your
config. The Token is generated by atlassian, and here is a link describing how
to get one: https://confluence.atlassian.com/cloud/api-tokens-938839638.html

That should be it! 

                                                     *jiravim-tabular-install*
[If the normal plugin doens't include this or you have problems importing the
tabular submodule]
Install Tabular with git submodules: Put these commands in the home directory
in the terminal: >
    git submodule init tabular
    git submodule update
This should install the tabular submodule and it will be imported
automatically by the plugin. If that doesn't work either ...

Install Tabular: Use your favorite plugin manager to install the Tabular plugin
located at https://github.com/godlygeek/tabular. For Vim-Plug, put >
    Plug 'godlygeek/tabular'
into your `.vimrc`

================================================================================
COMMANDS                                                        *jiravim-commands* 

Here is the list of commands that are available to the user:

--------------------------------------------------------------------------------
                                            *jiravim-boardopen*  *:JiraVimBoardOpen*
:JiraVimBoardOpen {name} 
    Opens board {name} in a new split. Split occurs with the help of
    the `sbuffer` command, so it obeys any directives you set in your vimrc.

                                    *jiravim-boardopennosp* *:JiraVimBoardOpenNosp*
:JiraVimBoardOpenNosp {name}
    Opens board {name} in the current window. Will give an error if
    current buffer has unsaved changes.

                                            *jiravim-issueopen* *:JiraVimIssueOpen*
:JiraVimIssueOpen {name}
    Opens issue {name} in the current window. Will give an error if current
    buffer has unsaved changes.

    If you are planning to switch between your board view and your issue views
    frequently, it's recommended to use |JiraVimSelectIssueNosp| or
    |JiraVimSelectIssueSp| functions.

                                        *jiravim-issueopensp* *:JiraVimIssueOpenSp*
:JiraVimIssueOpenSp {name}
    Opens issue {name} in a new split. Split occurs with the help of the
    `sbuffer` command, so it obeys any directives you set in your vimrc.

    Read |JiraVimIssueOpen| for recommendations on the usage of these two
    functions.

                                     *jiravim-selectissue* *:JiraVimSelectIssue*
:JiraVimSelectIssue {command}
    Reads the issue key from the current line and uses {command} to open that
    issue. It sets a pointer to the original board buffer so that you can return
    to it with the |JiraVimReturn| commands. 

    The {command} can be any command that accepts an string argument. This
    function only inputs the issue key from the current line. The standard
    commands to use are |JiraVimIssueOpen| and |JiraVimIssueOpenSp| with
    convenience commands |JiraVimSelectIssueSp| and |JiraVimSelectIssueNosp|
    respectively.

    This command is recommended over |JiraVimIssueOpen| when browsing from a
    board view because of its integration with |JiraVimReturn|. It's also
    recommended to set a keybind for this command in the appropriate filetypes
    (see |jiravim-filetypes|).

                            *jiravim-selectissue-nosp* *:JiraVimSelectIssueNosp*
:JiraVimSelectIssueNosp
    Convenience command for calling >
       :JiraVimSelectIssue JiraVimIssueOpen 
<    See |JiraVimSelectIssue| for more information.

                                 *jiravim-selectissuesp* *:JiraVimSelectIssuesp*
:JiraVimSelectIssueSp
    Convenience command for calling >
        :JiraVimSelectIssue JiraVimIssueOpenSp
<    See |JiraVimSelectIssue| for more information.

                                               *jiravim-return* *:JiraVimReturn*
:JiraVimReturn
    Returns to the board from which the issue was opened. If the board buffer is
    opened in an active window, moves the cursor to that window. Otherwise,
    opens the board in the current window provided there are no unwritten
    changes.

    It uses the `b:boardBufferNumber` to orchestrate the return. Therefore you
    can use this function wherever as long as the variable is set, although it's
    only been tested when returning to a board view from an issue view. Designed
    to complement |JiraVimSelectIssue|.

                                           *jiravim-loadmore* *:JiraVimLoadMore*
:JiraVimLoadMore
    Loads more issues from a certain column. When browsing a board, columns that
    have more than 10 issues will have a `---MORE---` line at the bottom. When
    calling this function over that line, it will load at most 10 more issues
    from the board.

    It's recommended to set a keybind for this command in the appropriate
    filetypes (see |jiravim-filetypes|).

                                       *jiravim-sprintopen* *:JiraVimSprintOpen*
:JiraVimSprintOpen {name}
    Opens sprint {name} in the current window. Will give an error if current
    buffer has unsaved changes.

    This function was intended to use with the Scrum board view. 

                                   *jiravim-selectsprint* *:JiraVimSelectSprint*
:JiraVimSelectSprint
    Opens the sprint name from the current line. A convenience method that takes
    the name of the sprint on the current line and calls |JiraVimSprintOpen|
    with it.

    This function was intended to use with the Scrum board view. It's
    recommended to set a keybind for this command in the appropriate filetypes
    (see |jiravim-filetypes|).

================================================================================
FILETYPES                                                      *jiravim-filetypes*

                                          *jiraboardview* *jiravim-boardview*
jiraboardview
    This filetype is a generic filetype for Jira board views. It sets syntax
    options common to all boards, and each of the other board syntax files
    source it. 

                              *jirakanbanboardview* *jiravim-kanbanboardview*
jirakanbanboardview
    This filetype is for kanban board views. Sources the syntax files from
    |jiraboarview|.

    Some useful commands for this filetype include |JiraVimSelectIssueSp|,
    |JiraVimSelectIssueNosp|, and |JiraVimLoadMore|. It's recommended that you
    make keybindings for these commands, see |jiravim-filetypes-keybinds|. 

                                *jirascrumboardview* *jiravim-scrumboardview*
jirascrumboardview
    This filetype displays a list of 50 sprints from the scrum board in
    no particular order. Sources the syntax files from |jiraboarview|.

    Some useful commands for this filetype include |JiraVimSelectSprint|. It's
    recommended that you make keybindings for these commands, see
    |jiravim-filetypes-keybinds|. 

                                             *jiraissueview* *jiravim-issueview*
jiraissueview 
    This filetype displays the issue information about a particular issue. 

    Some useful commands for this filetype include |JiraVimReturn|. It's
    recommended that you make keybindings for these commands, see
    |jiravim-filetypes-keybinds|. 

                                           *jirasprintview* *jiravim-sprintview*
jirasprintview
    This filetype displays the issues in columns from a particular sprint.  

    Some useful commands for this filetype include |JiraVimLoadMore|. It's
    recommended that you make keybindings for these commands, see
    |jiravim-filetypes-keybinds|. 

--------------------------------------------------------------------------------
Keybind Advice                                        *jiravim-filetypes-keybinds*

It's recommended to put your keybinds into an |augroup| and assign them to
filetypes with |autocmd|. So for example, a sample configuration would be: >
    augroup! jiravim_keybinds
        autocmd!
        autocmd FileType jirakanbanboardview nnoremap <buffer> <localleader>si \
            JiraVimSelectIssueSp
        autocmd FileType jirakanbanboardview, jirasprintview nnoremap <buffer> \
            <localleader>lm JiraVimLoadMore
    augroup END

<This would provide a single place where you would have all of your settings in
one place.


================================================================================
LICENSE                                                          *jiravim-license* 

All code in this project is licensed under GPLv3. This does not apply to any
submodules and dependencies of this project.

================================================================================
CONTACT                                                          *jiravim-contact* 

If you have bugs or feature suggestions, please open an issue on
(https://github.com/paulkass/jira-vim). If you feel inclined to talk to me
personally, send me an email at `leonardthesalmon@protonmail.com`

 vim:tw=80:ts=4:ft=help
